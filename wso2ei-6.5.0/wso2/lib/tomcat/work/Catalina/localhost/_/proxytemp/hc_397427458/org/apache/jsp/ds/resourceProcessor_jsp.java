/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.93
 * Generated at: 2019-10-02 06:16:00 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.ds;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Set;
import org.wso2.carbon.dataservices.ui.beans.*;
import java.util.ArrayList;

public final class resourceProcessor_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      org.wso2.carbon.dataservices.ui.beans.Data dataService = null;
      synchronized (session) {
        dataService = (org.wso2.carbon.dataservices.ui.beans.Data) _jspx_page_context.getAttribute("dataService", javax.servlet.jsp.PageContext.SESSION_SCOPE);
        if (dataService == null){
          dataService = new org.wso2.carbon.dataservices.ui.beans.Data();
          _jspx_page_context.setAttribute("dataService", dataService, javax.servlet.jsp.PageContext.SESSION_SCOPE);
        }
      }
      out.write('\r');
      out.write('\n');

    //retrieve form values set in addQuery.jsp page
    String serviceName = request.getParameter("serviceName");
    String queryId = request.getParameter("queryId");
    String resourcePath = request.getParameter("resourcePath");
    String resourceMethod = request.getParameter("resourceMethod");
    String description = request.getParameter("resourceDesc");
    String isExistingResource = request.getParameter("existingResource");
    String oldResourcePath = request.getParameter("oldResourcePath");
    String oldResourceMethod = request.getParameter("oldResourceMethod");
    String action = request.getParameter("action");
    String enableStreaming = request.getParameter("enableStreaming");
    String returnRequestStatusStr = request.getParameter("returnRequestStatus");
    action  = (action == null) ? "" : action;
    oldResourcePath = (oldResourcePath == null) ? "" : oldResourcePath;
    oldResourceMethod = (oldResourceMethod == null) ? "" : oldResourceMethod;

    Query query = dataService.getQuery(queryId);
    Param[] params = null;
    if (query != null) {
    	/* check to see if the query is null - i.e. remove resource */
        params = query.getParams();
    }

    if(action.equals("remove")){
        isExistingResource = "true";
    }
    Resource resource;
    if(isExistingResource != null){
        if(isExistingResource.equals("false")){
            //add resource
            CallQuery callQuery = new CallQuery();
            ArrayList<WithParam> withParamsList = new ArrayList();
            if (params != null) {
              for (int a = 0; a < params.length; a++) {
                  Param param = params[a];
                  WithParam withParam = new WithParam(param.getName(), param.getName(), "with-param");
                  withParam.setName(param.getName());
                  withParam.setParamType("with-param");
                  withParam.setParamValue(param.getName());
                  withParamsList.add(withParam);
               }
               callQuery.setWithParams(withParamsList);
            }                
            callQuery.setHref(queryId);
            resource = new Resource();
            resource.setPath(resourcePath);
            resource.setDescription(description);
            resource.setCallQuery(callQuery);
            resource.setMethod(resourceMethod);
            if (enableStreaming != null) {
            	resource.setDisableStreaming(false);
            } else {
        	    resource.setDisableStreaming(true);
            }
            if (returnRequestStatusStr != null) {
            	resource.setReturnRequestStatus(true);
            } else {
            	resource.setReturnRequestStatus(false);
            }
            dataService.addResource(resource);
        }else if(isExistingResource.equals("true")){
            //edit resource
            resource = dataService.getResource(oldResourcePath, oldResourceMethod);
            if(resource != null){
                if(action.equals("remove")){
                    dataService.removeResource(resource);
                }else{
                    ArrayList<WithParam> withParamsList = new ArrayList();
                    CallQuery newcallQuery = new CallQuery();
                    if (params != null) {
                        for (int a = 0; a < params.length; a++) {
                            Param param = params[a];
                            WithParam withParam = new WithParam(param.getName(), param.getName(), "with-param");
                            withParam.setName(param.getName());
                            withParam.setParamType("with-param");
                            withParam.setParamValue(param.getName());
                            withParamsList.add(withParam);
                        }
                        newcallQuery.setWithParams(withParamsList);
                    }
                    newcallQuery.setHref(queryId);
                    resource.setDescription(description);
                    resource.setPath(resourcePath);
                    if (enableStreaming != null) {
                    	resource.setDisableStreaming(false);
                    } else {
                	    resource.setDisableStreaming(true);
                    }
                    if (returnRequestStatusStr != null) {
                    	resource.setReturnRequestStatus(true);
                    } else {
                    	resource.setReturnRequestStatus(false);
                    }
                    //CallQuery callQuery = resource.getCallQuery();
                    //callQuery.setHref(queryId);
                    resource.setCallQuery(newcallQuery);
                    resource.setMethod(resourceMethod);
                }    
            }
        }
    }  
 
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("    location.href=\"resources.jsp?ordinal=4\";\r\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
