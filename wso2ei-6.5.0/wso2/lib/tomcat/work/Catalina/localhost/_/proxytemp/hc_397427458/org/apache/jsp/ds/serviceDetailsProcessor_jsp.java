/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.93
 * Generated at: 2019-10-02 06:15:45 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.ds;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.wso2.carbon.dataservices.ui.beans.AuthProvider;
import org.wso2.carbon.dataservices.ui.beans.Property;

public final class serviceDetailsProcessor_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/tlds/carbontags.tld", Long.valueOf(1563972902000L));
    _jspx_dependants.put("/WEB-INF/tlds/fmt.tld", Long.valueOf(1563972902000L));
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005ffmt_005fbundle_0026_005fbasename;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fcarbon_005fbreadcrumb_0026_005ftopPage_005fresourceBundle_005frequest_005flabel_005fnobody;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005ffmt_005fbundle_0026_005fbasename = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fcarbon_005fbreadcrumb_0026_005ftopPage_005fresourceBundle_005frequest_005flabel_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005ffmt_005fbundle_0026_005fbasename.release();
    _005fjspx_005ftagPool_005fcarbon_005fbreadcrumb_0026_005ftopPage_005fresourceBundle_005frequest_005flabel_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');
      out.write('\n');
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      //  fmt:bundle
      org.apache.taglibs.standard.tag.rt.fmt.BundleTag _jspx_th_fmt_005fbundle_005f0 = (org.apache.taglibs.standard.tag.rt.fmt.BundleTag) _005fjspx_005ftagPool_005ffmt_005fbundle_0026_005fbasename.get(org.apache.taglibs.standard.tag.rt.fmt.BundleTag.class);
      boolean _jspx_th_fmt_005fbundle_005f0_reused = false;
      try {
        _jspx_th_fmt_005fbundle_005f0.setPageContext(_jspx_page_context);
        _jspx_th_fmt_005fbundle_005f0.setParent(null);
        // /ds/serviceDetailsProcessor.jsp(23,0) name = basename type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
        _jspx_th_fmt_005fbundle_005f0.setBasename("org.wso2.carbon.dataservices.ui.i18n.Resources");
        int _jspx_eval_fmt_005fbundle_005f0 = _jspx_th_fmt_005fbundle_005f0.doStartTag();
        if (_jspx_eval_fmt_005fbundle_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
          if (_jspx_eval_fmt_005fbundle_005f0 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
            out = org.apache.jasper.runtime.JspRuntimeLibrary.startBufferedBody(_jspx_page_context, _jspx_th_fmt_005fbundle_005f0);
          }
          do {
            out.write('\n');
            //  carbon:breadcrumb
            org.wso2.carbon.ui.taglibs.Breadcrumb _jspx_th_carbon_005fbreadcrumb_005f0 = (org.wso2.carbon.ui.taglibs.Breadcrumb) _005fjspx_005ftagPool_005fcarbon_005fbreadcrumb_0026_005ftopPage_005fresourceBundle_005frequest_005flabel_005fnobody.get(org.wso2.carbon.ui.taglibs.Breadcrumb.class);
            boolean _jspx_th_carbon_005fbreadcrumb_005f0_reused = false;
            try {
              _jspx_th_carbon_005fbreadcrumb_005f0.setPageContext(_jspx_page_context);
              _jspx_th_carbon_005fbreadcrumb_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_fmt_005fbundle_005f0);
              // /ds/serviceDetailsProcessor.jsp(24,0) name = label type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
              _jspx_th_carbon_005fbreadcrumb_005f0.setLabel("Datasources");
              // /ds/serviceDetailsProcessor.jsp(24,0) name = resourceBundle type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
              _jspx_th_carbon_005fbreadcrumb_005f0.setResourceBundle("org.wso2.carbon.dataservices.ui.i18n.Resources");
              // /ds/serviceDetailsProcessor.jsp(24,0) name = topPage type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
              _jspx_th_carbon_005fbreadcrumb_005f0.setTopPage(false);
              // /ds/serviceDetailsProcessor.jsp(24,0) name = request type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
              _jspx_th_carbon_005fbreadcrumb_005f0.setRequest(request);
              int _jspx_eval_carbon_005fbreadcrumb_005f0 = _jspx_th_carbon_005fbreadcrumb_005f0.doStartTag();
              if (_jspx_th_carbon_005fbreadcrumb_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
                return;
              }
              _005fjspx_005ftagPool_005fcarbon_005fbreadcrumb_0026_005ftopPage_005fresourceBundle_005frequest_005flabel_005fnobody.reuse(_jspx_th_carbon_005fbreadcrumb_005f0);
              _jspx_th_carbon_005fbreadcrumb_005f0_reused = true;
            } finally {
              org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_carbon_005fbreadcrumb_005f0, _jsp_getInstanceManager(), _jspx_th_carbon_005fbreadcrumb_005f0_reused);
            }
            out.write('\n');
            org.wso2.carbon.dataservices.ui.beans.Data dataService = null;
            synchronized (session) {
              dataService = (org.wso2.carbon.dataservices.ui.beans.Data) _jspx_page_context.getAttribute("dataService", javax.servlet.jsp.PageContext.SESSION_SCOPE);
              if (dataService == null){
                dataService = new org.wso2.carbon.dataservices.ui.beans.Data();
                _jspx_page_context.setAttribute("dataService", dataService, javax.servlet.jsp.PageContext.SESSION_SCOPE);
              }
            }
            out.write("\n");
            out.write("<script type=\"text/javascript\" src=\"js/ui-validations.js\"></script>\n");
            out.write("\n");
            out.write("    ");

 //retrieve value from serviceDetails.jsp
    String description = request.getParameter("description");
	String serviceName = request.getParameter("serviceName");
    String batchRequest = request.getParameter("enableBatchReq");
    String isUseAppServerTS = request.getParameter("useAppServerTS");
    String boxcarring = request.getParameter("enableBoxcarring");
    String disableLegacyBoxcarringMode = request.getParameter("disableLegacyBoxcarringMode");
    String protectedTokens = request.getParameter("protectedTokens");
    String passwordProvider = request.getParameter("passwordProvider");
    String serviceNamespace = request.getParameter("serviceNamespace");
    String txManagerClass = request.getParameter("txManagerClass");
    String txManagerJNDIName = request.getParameter("txManagerJNDIName");
    String flag = request.getParameter("flag");
    String enableStreaming = request.getParameter("enableStreaming");
    String txManagerCleanupMethod = request.getParameter("txManagerCleanupMethod");
    String enableHTTP = request.getParameter("enableHTTP");
    String enableHTTPS = request.getParameter("enableHTTPS");
    String enableLocal = request.getParameter("enableLocal");
    String enableJMS = request.getParameter("enableJMS");
    String authorizationProviderClass = request.getParameter("authorizationProviderClass");
    int authProviderParamCount = 0;
    if (request.getParameter("authorizationProviderParamCount") != null && !request.getParameter("authorizationProviderParamCount").equals("")) {
        authProviderParamCount = Integer.parseInt(request.getParameter("authorizationProviderParamCount"));
    }
    boolean finishEnable = false;
    String forwardTo;
    try {
        if (serviceName != null && serviceName.trim().length() > 0) {
            dataService.setName(serviceName);
        }else{
            serviceName = dataService.getName();
        }
        if (batchRequest != null && batchRequest.trim().length() > 0) {
            dataService.setBatchRequest(true);
        } else {
            dataService.setBatchRequest(false);
        }
        if (isUseAppServerTS != null && isUseAppServerTS.trim().length() > 0) {
            dataService.setIsUseAppServerTS(Boolean.parseBoolean(isUseAppServerTS));
        }
        if (description != null && description.trim().length() > 0) {
            dataService.setDescription(description);
        }
        if (enableStreaming != null && enableStreaming.trim().length() > 0) {
        	dataService.setDisableStreaming(false);
        } else {
        	dataService.setDisableStreaming(true);
        }
        if (boxcarring != null && boxcarring.trim().length() > 0) {
            dataService.setBoxcarring(true);
        } else {
            dataService.setBoxcarring(false);
        }
        if (disableLegacyBoxcarringMode != null && disableLegacyBoxcarringMode.trim().length() > 0) {
            dataService.setDisableLegacyBoxcarringMode(true);
        } else {
            dataService.setDisableLegacyBoxcarringMode(false);
        }

        if (serviceNamespace != null) {
            dataService.setServiceNamespace(serviceNamespace);
        }
        if (txManagerClass != null) {
            dataService.setTxManagerClass(txManagerClass);
        }
        if (txManagerJNDIName != null) {
            dataService.setTxManagerName(txManagerJNDIName);
        }
        if (protectedTokens != null) {
            dataService.setProtectedTokens(protectedTokens);
        }
        if (passwordProvider != null) {
            dataService.setPasswordProvider(passwordProvider);
        }
        if (txManagerCleanupMethod != null) {
        	dataService.setTxManagerCleanupMethod(txManagerCleanupMethod);
        }
        if (enableHTTP != null && enableHTTP.trim().length() > 0) {
            dataService.setEnableHTTP(true);
        } else {
            dataService.setEnableHTTP(false);
        }
        if (enableHTTPS != null && enableHTTPS.trim().length() > 0) {
            dataService.setEnableHTTPS(true);
        } else {
            dataService.setEnableHTTPS(false);
        }
        if (enableLocal != null && enableLocal.trim().length() > 0) {
            dataService.setEnableLocal(true);
        } else {
            dataService.setEnableLocal(false);
        }
        if (enableJMS != null && enableJMS.trim().length() > 0) {
            dataService.setEnableJMS(true);
        } else {
            dataService.setEnableJMS(false);
        }

        if (authorizationProviderClass != null && !authorizationProviderClass.isEmpty()) {
            AuthProvider authProvider = new AuthProvider();
            authProvider.setClassName(authorizationProviderClass);

            for (int j = 0; j < authProviderParamCount; j++) {
                Property newProperty = new Property();

                String propertyName = request.getParameter("authProviderParameterName" + j);
                String propertValue = request.getParameter("authProviderParameterValue" + j);

                if (propertyName != null) {
                    newProperty.setName(propertyName);
                    newProperty.setValue(propertValue);
                    authProvider.addProperty(newProperty);
                }
            }
            dataService.setAuthProvider(authProvider);
        }

        description = (description == null) ? "" : description;
        txManagerCleanupMethod = (txManagerCleanupMethod == null) ? "" : txManagerCleanupMethod;
        serviceNamespace = (serviceNamespace == null) ? "" : serviceNamespace;
        txManagerClass = (txManagerClass == null) ? "" : txManagerClass;
        txManagerJNDIName = (txManagerJNDIName == null) ? "" : txManagerJNDIName;
        protectedTokens = (protectedTokens == null) ? "" : protectedTokens;
        passwordProvider = (passwordProvider == null) ? "" : passwordProvider;
        enableHTTP = (enableHTTP == null) ? "" : enableHTTP;
        enableHTTPS = (enableHTTPS == null) ? "" : enableHTTPS;
        enableLocal = (enableLocal == null) ? "" : enableLocal;
        enableJMS = (enableJMS == null) ? "" : enableJMS;
        forwardTo = "dataSources.jsp?ordinal=1";
        
            out.write("\n");
            out.write("    <script type=\"text/javascript\">\n");
            out.write("        location.href = \"");
            out.print(forwardTo);
            out.write("\";\n");
            out.write("    </script>\n");
            out.write("    ");

     } catch (Exception e) {
			String errorMsg = e.getLocalizedMessage();

            out.write("\n");
            out.write("<script type=\"text/javascript\">\n");
            out.write("\tlocation.href = \"dsErrorPage.jsp?errorMsg=");
            out.print(errorMsg);
            out.write("\";\n");
            out.write("</script>\n");

	}

            out.write('\n');
            out.write('\n');

 if (flag != null ) {
    	
            out.write("\n");
            out.write("    \t<script type=\"text/javascript\">\n");
            out.write("    \t    location.href = \"manageXADS.jsp\";\n");
            out.write("    \t</script>\n");
            out.write("    \t");

    }
            out.write('\n');
            int evalDoAfterBody = _jspx_th_fmt_005fbundle_005f0.doAfterBody();
            if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
          if (_jspx_eval_fmt_005fbundle_005f0 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
            out = _jspx_page_context.popBody();
          }
        }
        if (_jspx_th_fmt_005fbundle_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return;
        }
        _005fjspx_005ftagPool_005ffmt_005fbundle_0026_005fbasename.reuse(_jspx_th_fmt_005fbundle_005f0);
        _jspx_th_fmt_005fbundle_005f0_reused = true;
      } finally {
        org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fbundle_005f0, _jsp_getInstanceManager(), _jspx_th_fmt_005fbundle_005f0_reused);
      }
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
